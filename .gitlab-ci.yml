stages:
  - build
  - deploy

variables:
  BATCH_BUILD: "1"
  V: "0"
  MAKEFLAGS: "-j5 --no-keep-going"

# before each job, we need to check if this job is filtered by bot stage/job filter
.apply_bot_filter: &apply_bot_filter
  python $APPLY_BOT_FILTER_SCRIPT || exit 0

.setup_env:
  before_script: &setup_env
    # apply bot filter in before script
    - *apply_bot_filter
    # add gitlab ssh key
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GITLAB_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host gitlab.espressif.cn\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git --version
    - git submodule update --init --recursive

test_build_esp32:
  when: always
  stage: build
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - build
  variables:
    IDF_PATH: "$CI_PROJECT_DIR/idf/esp-idf"
  before_script: *setup_env
  script:
    - export PATH="$IDF_PATH/tools:$PATH"
    - mkdir idf
    - cd idf
    - export 
    - git clone --recursive --depth 1 $GITLAB_SSH_SERVER/idf/esp-idf.git
    - pushd esp-idf
    - echo "v4.1" > version.txt
    - source tools/ci/setup_python.sh
    - source tools/ci/configure_ci_environment.sh
    - tools/idf_tools.py --non-interactive install && eval "$(tools/idf_tools.py --non-interactive export)" || exit 1
    - popd
    - cd ../tools/ci && ./build_exmaples.sh || exit 1

test_build_esp8266:
  when: always
  stage: build
  image: $CI_DOCKER_REGISTRY/esp8266-ci-env-new
  tags:
    - build
  variables:
    IDF_PATH: "$CI_PROJECT_DIR/idf/ESP8266_RTOS_SDK"
  before_script: *setup_env
  script:
    - export PATH="$IDF_PATH/tools:$PATH"
    - mkdir idf
    - cd idf
    - export
    - git clone --recursive --depth 1 $GITLAB_SSH_SERVER/sdk/ESP8266_RTOS_SDK.git
    - pushd ESP8266_RTOS_SDK
    - echo "v3.3" > version.txt
    - popd
    - cd ../tools/ci && ./build_exmaples.sh || exit 1


push_master_to_github:
  stage: deploy
  image: $CI_DOCKER_REGISTRY/esp32-ci-env$BOT_DOCKER_IMAGE_TAG
  tags:
    - deploy
  only:
    - master
    - /^release\/v/
    - /^v\d+\.\d+(\.\d+)?($|-)/
  when: on_success
  dependencies:
    - test_build_esp32
    - test_build_esp8266
  variables:
    GITHUB_PUSH_REFS: refs/remotes/origin/release refs/remotes/origin/master
  before_script: *setup_env
  script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo -n $GH_PUSH_KEY > ~/.ssh/id_rsa_base64
    - base64 --decode --ignore-garbage ~/.ssh/id_rsa_base64 > ~/.ssh/id_rsa
    - chmod 600 ~/.ssh/id_rsa
    - echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config
    - git remote remove github &>/dev/null || true
    - git remote add github git@github.com:espressif/esp-wolfssl.git
    # What the next line of script does: goes through the list of refs for all branches we push to github,
    # generates a snippet of shell which is evaluated. The snippet checks CI_COMMIT_SHA against the SHA
    # (aka objectname) at tip of each branch, and if any SHAs match then it checks out the local branch
    # and then pushes that ref to a corresponding github branch
    - eval $(git for-each-ref --shell bash --format 'if [ $CI_COMMIT_SHA == %(objectname) ]; then git checkout -B %(refname:strip=3); git push --follow-tags github %(refname:strip=3); fi;' $GITHUB_PUSH_REFS)
